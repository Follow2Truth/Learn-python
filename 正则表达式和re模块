正则表达式是用来匹配字符串或者子串的一种模式，最常用的方法是re.match() 和 re.search().
re.match只匹配字符串的开头部分，而re.search匹配的是整个字符串中的子串。
re.findall(pattern,string)返回所有匹配的对象，re.finditer则返回一个迭代器。
re.split(pattern,string[,maxspit])按照pattern指定的格式对字符串进行分割。
re.sub(pattern,repl,string[,count])将pattern匹配的内容进行替换。
re.compile(pattern)生成一个pattern对象，这个对象有匹配，替换，分割字符串的功能。

关于正则表达式：
由一些普通字符和一些元字符(metacharacter)组成，
子表达式	匹配内容
.	       匹配除了换行符之外的内容
\w	     匹配所有字母和数字字符
\d	     匹配所有数字，相当于 [0-9]
\s	     匹配空白，相当于 [\t\n\t\f\v]
\W,\D,\S	匹配对应小写字母形式的补
[...]	   表示可以匹配的集合，支持范围表示如 a-z, 0-9 等
(...)	   表示作为一个整体进行匹配
¦	       表示逻辑或
^	       表示匹配后面的子表达式的补
*	       表示匹配前面的子表达式 0 次或更多次
+	       表示匹配前面的子表达式 1 次或更多次
?	       表示匹配前面的子表达式 0 次或 1 次
{m}	     表示匹配前面的子表达式 m 次
{m,}	   表示匹配前面的子表达式至少 m 次
{m,n}	   表示匹配前面的子表达式至少 m 次，至多 n 次

